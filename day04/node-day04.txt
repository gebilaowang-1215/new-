模板引擎    ejs    art-template常用    jade=》pug    swig    （通过npm 去管理）
ejs       定义：嵌入javascript的模板引擎
           方法：render  渲染                          compile   编译                template    模板
           ejs.render(template,data)                template    模板      data   数据（必须是一个对象！！）

输出buffer的解决办法：将data转化成字符串，用toString()方法
编译标签<% %>
输出标签<%= %>
注释<%# %>
去除首位空格<%_ %>
去除末尾空格<% _%>


art-template  是一个基于javascript的轻量型的模板引擎
   特点:语法简单,易上手
   语法:
      原始语法:   <% %>
      标准语法:(常用==>vue  微信小程序  angular) :      {{}}
   下载:npm  install   art-template  --save

{{}}===>插值表达式

queryString查询字符串(node中自带模块,无需下载)  相当于node.js中的query,可以获取get方式传输过来的字段
    query  获取(接收)get方式传输过来的字段   !!!

express   基于Nodejs平台,快速\开放\极简的开发框架.
     koa相当于express的升级版
后期都需要用npm
当前的package.json必须在具体的文件夹下,不能直接放到盘符下面
下载:npm install express --save
    常用方法:use  route   engine   param   render    set   path   
对象:Router 做路由使用       request请求    response响应

面试题:node.js中的end和express中的send的区别
      end只能传入字符串或buffer
      send除了可以传字符串和buffer外,还可以传对象等类型的值

在express中:
1\路由路径不区分大小写
2\获取动态路由参数  通过params  =>只接受get方式提交过来的东西,因为从url中截取
3\use  使用   只能用一次,第二次使用返回的还是第一次的返回结果
4\get请求  可以重复使用
5\post请求  必须用post请求方式才能执行
6\express支持链式调用


由于post方式不能直接通过query方式获取传输数据,所以需要用到:中间件!!!
中间件也属于包,需要npm下载   包含:路由中间件和第三方中间件
body-parser属于第三方中间件
内部包含两个属性:
         bodyParser.urlencoded({'extended':'false'})  针对于post方式处理字符串
         bodyParser.json()          针对于post方式处理json对象

use
get==>req.query
post==>req.body   需要中间件body-parser


静态资源 static
访问静态资源的方法:express.static()


精讲模板引擎(express中的模板引擎)
面试题:
node里面的全局对象:
   __filename  :绝对目录(从盘符到本身) 
   __dirname  :相对目录(不含本身的父级到盘符路径)
   settimeout
   setInterval
   module
ejs       art-template(node中的模板引擎)====>express-art-template(express中的模板引擎)


预习:    events事件   和    stream流     和    buffer缓存区

周末作业:  路由:express.Router()
               cookie-parser
               express-session(仅存在于后端)
               跨域(解决的目的是:响应请求头)   报跨域的错的内容:Access-Control-Allow-Origin，'*'
                     res.header()
                     res.setHeader






























