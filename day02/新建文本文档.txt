window.location    
	search  ?   hash  #   href  url   port  端口  host主机   hostname主机名
JSON.parse   JSON.Stringify
URL模块
       parse   解析（字符串转化对象）   url.parse('http://127.0.0.1',true)      解析url地址，返回一个对象
	url.parse(req.url)字符串    
	url.parse(req.url,true)  按照对象格式解析
	portcol 端口域  HTTP://
	auth  权限
	host  主机
	port   端口
	hostname   主机名  （hostname要和port配合使用）
	hash  hash值
	search ？
	query   获取get方式传输过来的值
	pathname  后面的一级
	pash  完整路径
	href  页面跳转路径
       resolve   按照url正确的方式解析路径      拼接，对地址字符串拼接
	第一个参数为主内容，第二个参数为即将要拼接的字段
	把路径转化为字符串，用第二个参数的路由替换当前路径的一级路由
       format    格式化        把对象转为字符串
  
AMD和CMD有什么区别
  AMD推崇依赖前置，CMD推崇依赖就近。
  AMD加载完模块后，就立马执行该模块；
  CMD加载完某个模块后没有立即执行而是等到遇到require语句的时再执行。
  两者的不同导致各自的优点是AMD用户体验好，因为模块提前执行了；CMD性能好，因为只有用户需要的时候才执行。

进程和线程有什么区别
   根本区别：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位	
   在开销方面：每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。


   所处环境：在操作系统中能同时运行多个进程（程序）；而在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）


   内存分配方面：系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源。


   包含关系：没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。

编译性语言和解释性语言的区别
   1、编译性语言
（1）只须编译一次就可以把源代码编译成机器语言，后面的执行无须重新编译，直接使用之前的编译结果就可以；因此其执行的效率比较高；

	         （2）编译性语言代表：C、C++、Pascal/Object Pascal（Delphi）；

	         （3）程序执行效率比较高，但比较依赖编译器，因此跨平台性差一些；
   2、解释性语言
（1）源代码不能直接翻译成机器语言，而是先翻译成中间代码，再由解释器对中间代码进行解释运行；
源代码―>中间代码―>机器语言


	         （2）程序不需要编译，程序在运行时才翻译成机器语言，每执行一次都要翻译一次；

	         （3）解释性语言代表：Python、JavaScript、Shell、Ruby、MATLAB等；

	         （4）运行效率一般相对比较低，依赖解释器，跨平台性好；

1.本身都是一个数组
2.exports指向module.exports,同时exports是module.exports的引用
3.exports和module.exports默认都是一个空对象